@using Models.JsonTpansportModel;
@inject IHttpClientService IHttpClientService
@inject NavigationManager NavigationManager
@inject ILocationsSR ILocationsSR

<div style="padding-bottom:30%;">
    <EditForm Model="AponentVM" OnSubmit="FindUsers">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div style="display: flex;">
            <label>
                Initial
                <div>
                    <InputNumber class="form-control" style="width:35%;  border-radius: 5px;" @bind-Value="AponentVM.InitialAge"></InputNumber>
                </div>
            </label>

            <label>
                Final
                <div>
                    <InputNumber class="form-control" style="width:35%;  border-radius: 5px;" @bind-Value="AponentVM.FinalAge"></InputNumber>
                </div>
            </label>
        </div>
        @*Сообщени об ошибках*@
        <div class="validation-message">
            <ValidationMessage For="(() => AponentVM.InitialAge)"></ValidationMessage>
            <ValidationMessage For="(() => AponentVM.FinalAge)"></ValidationMessage>
        </div>

        <label>
            Сountry
            <div>
                <InputSelect @bind-Value="AponentVM.Сountry" @oninput="() => Task.Run(() => ILocationsSR.GetNewCitiesForUserSearch(AponentVM.Сountry, AponentVM))" class="form-control input-required" style="width:70vw;">
                    @foreach (var country in ILocationsSR.Locations)
                    {
                        <option value="@country.Key">@country.Key</option>
                    }
                </InputSelect>
            </div>
        </label>
        <div class="validation-message">
            <ValidationMessage For="(() => AponentVM.Сountry)"></ValidationMessage>
        </div>

        <label>
            City
            <div>
                <InputSelect @bind-Value="@AponentVM.City" class="form-control input-required" style="width:70vw;">
                    @foreach (var city in ILocationsSR.Locations[AponentVM.Сountry])
                    {
                        <option value="@city.name">@city.name </option>
                    }
                </InputSelect>
            </div>
        </label>
        <div class="validation-message">
            <ValidationMessage For="(() => AponentVM.Сountry)"></ValidationMessage>
        </div>

        <div class="form-group">
            <div>
                <label>
                    <InputCheckbox @bind-Value="AponentVM.Man"></InputCheckbox> Men
                </label>

                <label>
                    <InputCheckbox @bind-Value="AponentVM.Woman"></InputCheckbox> Woman
                </label>
            </div>
        </div>

        <button class="accept-btn font-size-accept-btn" type="submit">Accept</button>
    </EditForm>
</div>

@code
{
    [Parameter] public ICubyCollection Collection { get; set; }

    private AponentJson AponentVM { get; set; } 

    //Method: Получаю данные предыдущего поиска
    protected async override Task OnInitializedAsync()
    {
        //Initialized dictionary
        GetDictionaryLocations();
        AponentVM = Collection.DataForXXX.ApponentDataJson;
    }
             

    //Method: Получаю данные из формы и записываю в базу и в куки
    private async void FindUsers()
    {
        await IHttpClientService.PostJsonGetStringAsync<AponentJson>(AponentVM, AboutUsers.Controller, AboutUsers.ReinstallSearch);

        //Окрываю загрузочную картинку
        Switches.SwitchLoad = true;
        //переключаю свичи
        Switches.SelectMethodForSwitch(1);
        NavigationManager.NavigateTo("/", true);
    }   

    //Method: Get dictionary locations
    private void GetDictionaryLocations()
    {
        //Get Locations.json from static files  to string
        using var stream = FileSystem.OpenAppPackageFileAsync("wwwroot/Locations.json").Result;
        ILocationsSR.InitializeDictionary(stream);
    }
}
